#!/usr/bin/env python3
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ —Ç–æ–≤–∞—Ä–æ–≤ —Å —Ü–µ–Ω–∞–º–∏
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ API endpoints –Ω–∞ –æ—Å–Ω–æ–≤–µ price_updater.py
"""

import csv
import time
from datetime import datetime
from typing import List, Dict
from yandex_market_api import YandexMarketClient, AuthType, YandexMarketAPIError
from config import get_config

def get_business_id(client: YandexMarketClient, campaign_id: int) -> int:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ business_id –∏–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–º–ø–∞–Ω–∏–∏
    """
    try:
        campaign_response = client.campaigns.get_campaign(campaign_id)
        campaign_info = campaign_response.get('campaign', {})
        business_id = campaign_info.get('business', {}).get('id')
        
        if not business_id:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å business_id –∏–∑ –∫–∞–º–ø–∞–Ω–∏–∏")
        
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω business_id: {business_id}")
        print(f"üìä –ö–∞–º–ø–∞–Ω–∏—è: {campaign_info.get('domain', 'N/A')}")
        
        return business_id
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è business_id: {e}")
        raise

def get_all_offers_with_prices(client: YandexMarketClient, business_id: int) -> List[Dict]:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ —Å —Ü–µ–Ω–∞–º–∏ —á–µ—Ä–µ–∑ business API
    """
    print("üîç –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ —á–µ—Ä–µ–∑ business API...")
    
    all_offers = []
    page_token = None
    page_num = 1
    
    while True:
        try:
            print(f"üìÑ –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page_num}...")
            
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
            params = {"limit": 200}
            if page_token:
                params["pageToken"] = page_token
            
            # POST –∑–∞–ø—Ä–æ—Å —Å –ø—É—Å—Ç—ã–º —Ç–µ–ª–æ–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤
            response = client.api._make_request(
                "POST", 
                f"/businesses/{business_id}/offer-mappings",
                params=params,
                data={}
            )
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ –æ—Ç–≤–µ—Ç–∞
            result = response.get('result', {})
            offer_mappings = result.get('offerMappings', [])
            
            if not offer_mappings:
                print("‚úÖ –ë–æ–ª—å—à–µ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                break
            
            print(f"üì¶ –ù–∞–π–¥–µ–Ω–æ {len(offer_mappings)} —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page_num}")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä—ã
            for mapping in offer_mappings:
                offer = mapping.get('offer', {})
                mapping_data = mapping.get('mapping', {})
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
                offer_info = {
                    'offer_id': offer.get('offerId', ''),
                    'name': offer.get('name', ''),
                    'vendor': offer.get('vendor', ''),
                    'category': mapping_data.get('marketCategoryName', ''),
                    'market_category_id': mapping_data.get('marketCategoryId', ''),
                    'price': None,
                    'currency': 'RUR',
                    'availability': offer.get('availability', ''),
                    'barcode': offer.get('barcodes', []),
                    'vendor_code': offer.get('vendorCode', ''),
                    'description': offer.get('description', ''),
                    'pictures': offer.get('pictures', []),
                    'market_sku': mapping_data.get('marketSku', ''),
                }
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–Ω—É
                basic_price = offer.get('basicPrice')
                if basic_price and isinstance(basic_price, dict):
                    price_value = basic_price.get('value')
                    if price_value:
                        offer_info['price'] = float(price_value)
                        offer_info['currency'] = basic_price.get('currencyId', 'RUR')
                
                all_offers.append(offer_info)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
            paging = result.get('paging', {})
            page_token = paging.get('nextPageToken')
            
            if not page_token:
                print("‚úÖ –í—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã")
                break
            
            page_num += 1
            time.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            
        except YandexMarketAPIError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤: {e}")
            break
        except Exception as e:
            print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            break
    
    print(f"üìä –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(all_offers)}")
    return all_offers

def save_to_csv(offers: List[Dict], filename: str):
    """
    –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –≤ CSV —Ñ–∞–π–ª
    """
    if not offers:
        print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
        return
    
    print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ {len(offers)} —Ç–æ–≤–∞—Ä–æ–≤ –≤ {filename}...")
    
    try:
        with open(filename, 'w', newline='', encoding='utf-8') as csvfile:
            fieldnames = [
                'offer_id',
                'name',
                'vendor',
                'category',
                'market_category_id',
                'price',
                'currency',
                'availability',
                'market_sku',
                'vendor_code',
                'description'
            ]
            
            writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
            writer.writeheader()
            
            for offer in offers:
                writer.writerow({
                    'offer_id': offer.get('offer_id', ''),
                    'name': offer.get('name', ''),
                    'vendor': offer.get('vendor', ''),
                    'category': offer.get('category', ''),
                    'market_category_id': offer.get('market_category_id', ''),
                    'price': offer.get('price', ''),
                    'currency': offer.get('currency', ''),
                    'availability': offer.get('availability', ''),
                    'market_sku': offer.get('market_sku', ''),
                    'vendor_code': offer.get('vendor_code', ''),
                    'description': offer.get('description', '')[:100] + '...' if len(offer.get('description', '')) > 100 else offer.get('description', ''),
                })
        
        print(f"‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filename}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        with_price = sum(1 for offer in offers if offer.get('price'))
        with_mapping = sum(1 for offer in offers if offer.get('market_sku'))
        available = sum(1 for offer in offers if offer.get('availability') == 'ACTIVE')
        
        print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   - –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(offers)}")
        print(f"   - –° —Ü–µ–Ω–∞–º–∏: {with_price}")
        print(f"   - –° –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ –ú–∞—Ä–∫–µ—Ç—É: {with_mapping}")
        print(f"   - –ê–∫—Ç–∏–≤–Ω—ã—Ö: {available}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    output_file = f'products_fixed_{timestamp}.csv'
    
    print("=" * 60)
    print("üîß –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –≠–ö–°–ü–û–†–¢ –¢–û–í–ê–†–û–í –° –¶–ï–ù–ê–ú–ò")
    print("=" * 60)
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = get_config()
        client = YandexMarketClient(config.api_key, AuthType.API_KEY)
        
        print(f"üè™ –ö–∞–º–ø–∞–Ω–∏—è: {config.campaign_id}")
        print(f"üìÑ –§–∞–π–ª: {output_file}")
        print()
        
        # –ü–æ–ª—É—á–∞–µ–º business_id
        business_id = get_business_id(client, config.campaign_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã
        offers = get_all_offers_with_prices(client, business_id)
        
        if offers:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ CSV
            save_to_csv(offers, output_file)
            print("\nüéâ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        else:
            print("üòû –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        print("üîç –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏:")
        traceback.print_exc()

if __name__ == "__main__":
    main() 