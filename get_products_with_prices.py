#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ —Å –∏—Ö —Ü–µ–Ω–∞–º–∏ —á–µ—Ä–µ–∑ Yandex Market Partner API
–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ CSV —Ñ–∞–π–ª.

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python get_products_with_prices.py [--output filename.csv] [--campaign-id ID]
"""

import csv
import json
import time
import argparse
from datetime import datetime
from typing import List, Dict, Set, Optional
from dataclasses import dataclass

from yandex_market_api import YandexMarketClient, AuthType, YandexMarketAPIError
from config import get_config

@dataclass
class ProductData:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–≤–∞—Ä–µ"""
    offer_id: str
    name: str
    vendor: str
    price: Optional[float]
    currency: str
    price_vat: Optional[str]
    updated_at: Optional[str]
    status: str
    market_category_id: Optional[int]
    errors: List[str]
    warnings: List[str]


class ProductPriceCollector:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–≤–∞—Ä–∞—Ö –∏ –∏—Ö —Ü–µ–Ω–∞—Ö"""
    
    def __init__(self, api_key: str, campaign_id: int):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–∞
        
        Args:
            api_key: –ö–ª—é—á API –Ø–Ω–¥–µ–∫—Å.–ú–∞—Ä–∫–µ—Ç–∞
            campaign_id: ID –∫–∞–º–ø–∞–Ω–∏–∏ (–º–∞–≥–∞–∑–∏–Ω–∞)
        """
        self.client = YandexMarketClient(api_key, AuthType.API_KEY)
        self.campaign_id = campaign_id
        self.products: List[ProductData] = []
        
    def get_all_offers(self) -> List[Dict]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –∫–∞–º–ø–∞–Ω–∏–∏ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
        
        Returns:
            –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤
        """
        print("üîç –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤...")
        
        all_offers = []
        page_token = None
        page_num = 1
        
        while True:
            try:
                print(f"üìÑ –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page_num}...")
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                response = self.client.offers.get_offers(
                    campaign_id=self.campaign_id,
                    page_token=page_token,
                    limit=200  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                )
                
                offers = response.get('offers', [])
                if not offers:
                    print("‚úÖ –ë–æ–ª—å—à–µ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                    break
                
                all_offers.extend(offers)
                print(f"üì¶ –ù–∞–π–¥–µ–Ω–æ {len(offers)} —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page_num}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                paging = response.get('paging', {})
                page_token = paging.get('nextPageToken')
                
                if not page_token:
                    print("‚úÖ –í—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã")
                    break
                
                page_num += 1
                
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                time.sleep(0.1)
                
            except YandexMarketAPIError as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤: {e}")
                break
        
        print(f"üìä –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(all_offers)}")
        return all_offers
    
    def get_prices_for_offers(self, offer_ids: List[str]) -> Dict[str, Dict]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω –¥–ª—è —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
        
        Args:
            offer_ids: –°–ø–∏—Å–æ–∫ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ü–µ–Ω–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
        """
        if not offer_ids:
            return {}
        
        try:
            print(f"üí∞ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω –¥–ª—è {len(offer_ids)} —Ç–æ–≤–∞—Ä–æ–≤...")
            
            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ 1000 —Ç–æ–≤–∞—Ä–æ–≤ (–ª–∏–º–∏—Ç API)
            batch_size = 1000
            all_prices = {}
            
            for i in range(0, len(offer_ids), batch_size):
                batch = offer_ids[i:i + batch_size]
                print(f"üí∏ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–∫–µ—Ç–∞ {i//batch_size + 1}: —Ç–æ–≤–∞—Ä—ã {i+1}-{min(i+batch_size, len(offer_ids))}")
                
                # –ó–∞–ø—Ä–æ—Å —Ü–µ–Ω –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–∞–∫–µ—Ç–∞
                request_body = {
                    "offerIds": batch
                }
                
                response = self.client.api._make_request(
                    "POST", 
                    f"/campaigns/{self.campaign_id}/offer-prices",
                    data=request_body
                )
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
                offers_data = response.get('offers', [])
                for offer_data in offers_data:
                    offer_id = offer_data.get('offerId')
                    if offer_id:
                        all_prices[offer_id] = offer_data
                
                # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–∞–∫–µ—Ç–∞–º–∏
                if i + batch_size < len(offer_ids):
                    time.sleep(0.2)
            
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —Ü–µ–Ω –¥–ª—è {len(all_prices)} —Ç–æ–≤–∞—Ä–æ–≤")
            return all_prices
            
        except YandexMarketAPIError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω: {e}")
            return {}
    
    def process_offers_data(self, offers: List[Dict], prices_data: Dict[str, Dict]) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–≤–∞—Ä–∞—Ö –∏ —Ü–µ–Ω–∞—Ö
        
        Args:
            offers: –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
            prices_data: –î–∞–Ω–Ω—ã–µ –æ —Ü–µ–Ω–∞—Ö
        """
        print("üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–≤–∞—Ä–∞—Ö...")
        
        for offer in offers:
            try:
                offer_id = offer.get('offerId', '')
                
                # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ
                name = offer.get('name', '')
                vendor = offer.get('vendor', '')
                status = offer.get('status', 'UNKNOWN')
                market_category_id = offer.get('marketCategoryId')
                
                # –û—à–∏–±–∫–∏ –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
                errors = [error.get('message', '') for error in offer.get('errors', [])]
                warnings = [warning.get('message', '') for warning in offer.get('warnings', [])]
                
                # –¶–µ–Ω–∞ –∏–∑ –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞
                price = None
                currency = 'RUR'
                price_vat = None
                updated_at = None
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–Ω—É –≤ –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                basic_price = offer.get('basicPrice', {})
                campaign_price = offer.get('campaignPrice', {})
                
                if campaign_price.get('value'):
                    price = float(campaign_price['value'])
                    currency = campaign_price.get('currency', 'RUR')
                    price_vat = campaign_price.get('vat')
                elif basic_price.get('value'):
                    price = float(basic_price['value'])
                    currency = basic_price.get('currency', 'RUR')
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–Ω—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ —Ü–µ–Ω
                if offer_id in prices_data:
                    price_info = prices_data[offer_id]
                    price_data = price_info.get('price', {})
                    if price_data.get('value'):
                        price = float(price_data['value'])
                        currency = price_data.get('currency', 'RUR')
                        updated_at = price_info.get('updatedAt')
                
                # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–≤–∞—Ä–µ
                product = ProductData(
                    offer_id=offer_id,
                    name=name,
                    vendor=vendor,
                    price=price,
                    currency=currency,
                    price_vat=price_vat,
                    updated_at=updated_at,
                    status=status,
                    market_category_id=market_category_id,
                    errors=errors,
                    warnings=warnings
                )
                
                self.products.append(product)
                
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–æ–≤–∞—Ä–∞ {offer.get('offerId', 'UNKNOWN')}: {e}")
        
        print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(self.products)} —Ç–æ–≤–∞—Ä–æ–≤")
    
    def collect_all_data(self) -> List[ProductData]:
        """
        –°–±–æ—Ä –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–≤–∞—Ä–∞—Ö –∏ —Ü–µ–Ω–∞—Ö
        
        Returns:
            –°–ø–∏—Å–æ–∫ –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–≤–∞—Ä–∞—Ö
        """
        print(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–∞–º–ø–∞–Ω–∏–∏ {self.campaign_id}")
        
        # 1. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã
        offers = self.get_all_offers()
        if not offers:
            print("‚ùå –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return []
        
        # 2. –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Ü–µ–Ω
        offer_ids = [offer.get('offerId') for offer in offers if offer.get('offerId')]
        print(f"üî¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö ID —Ç–æ–≤–∞—Ä–æ–≤: {len(set(offer_ids))}")
        
        # 3. –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—ã –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤
        prices_data = self.get_prices_for_offers(list(set(offer_ids)))
        
        # 4. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
        self.process_offers_data(offers, prices_data)
        
        return self.products
    
    def save_to_csv(self, filename: str) -> None:
        """
        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ CSV —Ñ–∞–π–ª
        
        Args:
            filename: –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        """
        if not self.products:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
            return
        
        print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª {filename}...")
        
        try:
            with open(filename, 'w', newline='', encoding='utf-8') as csvfile:
                fieldnames = [
                    'offer_id',
                    'name', 
                    'vendor',
                    'price',
                    'currency',
                    'price_vat',
                    'updated_at',
                    'status',
                    'market_category_id',
                    'errors_count',
                    'warnings_count',
                    'errors',
                    'warnings'
                ]
                
                writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
                writer.writeheader()
                
                for product in self.products:
                    writer.writerow({
                        'offer_id': product.offer_id,
                        'name': product.name,
                        'vendor': product.vendor,
                        'price': product.price if product.price is not None else '',
                        'currency': product.currency,
                        'price_vat': product.price_vat or '',
                        'updated_at': product.updated_at or '',
                        'status': product.status,
                        'market_category_id': product.market_category_id or '',
                        'errors_count': len(product.errors),
                        'warnings_count': len(product.warnings),
                        'errors': '; '.join(product.errors) if product.errors else '',
                        'warnings': '; '.join(product.warnings) if product.warnings else ''
                    })
            
            print(f"‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª {filename}")
            print(f"üìä –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(self.products)}")
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            products_with_price = sum(1 for p in self.products if p.price is not None)
            products_with_errors = sum(1 for p in self.products if p.errors)
            
            print(f"üìà –¢–æ–≤–∞—Ä–æ–≤ —Å —Ü–µ–Ω–∞–º–∏: {products_with_price}")
            print(f"‚ö†Ô∏è –¢–æ–≤–∞—Ä–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏: {products_with_errors}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(
        description='–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ —Å —Ü–µ–Ω–∞–º–∏ –∏–∑ Yandex Market API'
    )
    parser.add_argument(
        '--output', '-o',
        default=f'products_with_prices_{datetime.now().strftime("%Y%m%d_%H%M%S")}.csv',
        help='–ò–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ CSV —Ñ–∞–π–ª–∞'
    )
    parser.add_argument(
        '--campaign-id', '-c',
        type=int,
        help='ID –∫–∞–º–ø–∞–Ω–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏)'
    )
    
    args = parser.parse_args()
    
    try:
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        config = get_config()
        campaign_id = args.campaign_id or config.campaign_id
        
        print("=" * 60)
        print("üõçÔ∏è YANDEX MARKET PRODUCTS & PRICES COLLECTOR")
        print("=" * 60)
        print(f"üè™ –ö–∞–º–ø–∞–Ω–∏—è ID: {campaign_id}")
        print(f"üìÑ –í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: {args.output}")
        print(f"üïê –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print("=" * 60)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–∞ –∏ —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
        collector = ProductPriceCollector(config.api_key, campaign_id)
        products = collector.collect_all_data()
        
        if products:
            collector.save_to_csv(args.output)
            print("üéâ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        else:
            print("üòû –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
    except ValueError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª config.env –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return 1
    
    return 0


if __name__ == "__main__":
    exit(main()) 